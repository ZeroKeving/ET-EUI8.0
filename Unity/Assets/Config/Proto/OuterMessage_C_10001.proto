syntax = "proto3";
package ET;

message HttpGetRouterResponse
{
	repeated string Realms = 1;
	repeated string Routers = 2;
}

message RouterSync
{
	uint32 ConnectId = 1;
	string Address = 2;
}

//ResponseType M2C_TestResponse
message C2M_TestRequest // ILocationRequest
{
	int32 RpcId = 1;
	string request = 2;
}

message M2C_TestResponse // IResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
	string response = 4;
}

//ResponseType G2C_EnterMap
message C2G_EnterMap // ISessionRequest
{
	int32 RpcId = 1;
}

message G2C_EnterMap // ISessionResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
	// 自己unitId
	int64 MyId = 4;
}

message MoveInfo
{
	repeated Unity.Mathematics.float3 Points = 1;
	Unity.Mathematics.quaternion Rotation = 2;
	int32 TurnSpeed = 3;
}

message UnitInfo
{
	int64 UnitId = 1;
	int32 ConfigId = 2;
	int32 Type = 3;
	Unity.Mathematics.float3 Position = 4;
	Unity.Mathematics.float3 Forward = 5;
	map<int32, int64> KV = 6;
	MoveInfo MoveInfo = 7;
}

message M2C_CreateUnits // IMessage
{
	repeated UnitInfo Units = 1;
}

message M2C_CreateMyUnit // IMessage
{
	UnitInfo Unit = 1;
}

message M2C_StartSceneChange // IMessage
{
	int64 SceneInstanceId = 1;
	string SceneName = 2;	
}

message M2C_RemoveUnits // IMessage
{
	repeated int64 Units = 1;
}

message C2M_PathfindingResult // ILocationMessage
{
	int32 RpcId = 1;
	Unity.Mathematics.float3 Position = 2;
}

message C2M_Stop // ILocationMessage
{
	int32 RpcId = 1;
}

message M2C_PathfindingResult // IMessage
{
	int64 Id = 1;
	Unity.Mathematics.float3 Position = 2;
	repeated Unity.Mathematics.float3 Points = 3;
}

message M2C_Stop // IMessage
{
	int32 Error = 1;
	int64 Id = 2;
	Unity.Mathematics.float3 Position = 3;
	Unity.Mathematics.quaternion Rotation = 4;
}

//ResponseType G2C_Ping
message C2G_Ping // ISessionRequest
{
	int32 RpcId = 1;
}

message G2C_Ping // ISessionResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
	int64 Time = 4;
}


message G2C_Test // ISessionMessage
{
}

//ResponseType M2C_Reload
message C2M_Reload // ISessionRequest
{
	int32 RpcId = 1;
	string Account = 2;
	string Password = 3;
}

message M2C_Reload // ISessionResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType R2C_Login
message C2R_Login // ISessionRequest
{
	int32 RpcId = 1;
	string  Account = 2;  // 帐号
	string  Password = 3;  // 密码
}

message R2C_Login // ISessionResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
	string Address = 4;
	int64 Key = 5;
	int64 GateId = 6;
}

//ResponseType G2C_LoginGate
message C2G_LoginGate // ISessionRequest
{
	int32 RpcId = 1;
	int64 Key = 2;  // 帐号
	int64 GateId = 3;
}

message G2C_LoginGate // ISessionResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
	int64 PlayerId = 4;
}

message G2C_TestHotfixMessage // ISessionMessage
{
	string Info = 1;
}

//ResponseType M2C_TestRobotCase
message C2M_TestRobotCase // ILocationRequest
{
	int32 RpcId = 1;
	int32 N = 2;
}

message M2C_TestRobotCase // ILocationResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
	int32 N = 4;
}

message C2M_TestRobotCase2 // ILocationMessage
{
	int32 RpcId = 1;
	int32 N = 2;
}

message M2C_TestRobotCase2 // ILocationMessage
{
	int32 RpcId = 1;
	int32 N = 2;
}

//ResponseType M2C_TransferMap
message C2M_TransferMap // ILocationRequest
{
	int32 RpcId = 1;
}

message M2C_TransferMap // ILocationResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType G2C_Benchmark
message C2G_Benchmark // ISessionRequest
{
	int32 RpcId = 1;
}

message G2C_Benchmark // ISessionResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//区服列表信息
message ServerListInfoProto
{
	int32 Zone = 1;//区服id
	string Name = 2;//区服名字
	int32 Status = 3;//区服状态
}

//ResponseType R2C_LoginGame
message C2R_LoginGame // ISessionRequest
{
	int32 RpcId = 1;//如果要服务器回复这个消息就必须要加，且message后面的备注也需要加ISessionRequest，如果服务器不需要回复则不用加这个变量
	string Account = 2;//账号
	string Password = 3;//密码
	int32 LoginWay = 4;//登录方式
}

message R2C_LoginGame // ISessionResponse
{
	int32 RpcId = 1;//message后面的备注标识表示服务器返回消息，必须要存在
	int32 Error = 2;//必须要存在
	string Message = 3;//必须要存在

	string Token = 4;//登录令牌
	
	repeated ServerListInfoProto ServerListInfosProto = 5;//区服列表信息
}

//ResponseType R2C_Register
message C2R_Register // ISessionRequest
{
	int32 RpcId = 1;//如果要服务器回复这个消息就必须要加，且message后面的备注也需要加ISessionRequest，如果服务器不需要回复则不用加这个变量
	string Account = 2;//账号
	string Password1 = 3;//密码
	string Password2 = 4;//密码
}

message R2C_Register // ISessionResponse
{
	int32 RpcId = 1;//message后面的备注标识表示服务器返回消息，必须要存在
	int32 Error = 2;//必须要存在
	string Message = 3;//必须要存在
}

//ResponseType R2C_LoginZone
message C2R_LoginZone // ISessionRequest
{
	int32 RpcId = 1;//如果要服务器回复这个消息就必须要加，且message后面的备注也需要加ISessionRequest，如果服务器不需要回复则不用加这个变量
	string Account = 2;//账号
	int32 Zone = 3;//登录区服
	string Token = 4;//登录令牌
}

message R2C_LoginZone // ISessionResponse
{
	int32 RpcId = 1;//message后面的备注标识表示服务器返回消息，必须要存在
	int32 Error = 2;//必须要存在
	string Message = 3;//必须要存在

	string GateAddress = 4;
	int64 GateKey = 5;
	int64 GateId = 6;
}

//ResponseType G2C_LoginGameGate
message C2G_LoginGameGate // ISessionRequest
{
	int32 RpcId = 1;
	int64 GateKey = 2;  // 登录钥匙
	int64 GateId = 3;
}

message G2C_LoginGameGate // ISessionResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;

	int64 PlayerId = 4;
}

message ALL2C_Disconnect // IMessage
{
	int32 Error = 1;
}

